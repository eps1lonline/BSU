import numpy as np

def nonlin(x, deriv=False):
    if deriv:
        return x * (1 - x)  # Здесь x уже является результатом активации, полученным ранее
    
    return 1 / (1 + np.exp(-x))
    
X = np.array([[1.9585, 1.9585, 1.9585, 1.9666],
              [1.9585, 1.9585, 1.9666, 1.9707],
              [1.9585, 1.9666, 1.9707, 1.9653],
              [1.9666, 1.9707, 1.9653, 1.9538],
              [1.9707, 1.9653, 1.9538, 1.9538],
              [1.9653, 1.9538, 1.9538, 1.9538],
              [1.9538, 1.9538, 1.9538, 1.9597],
              [1.9538, 1.9538, 1.9597, 1.9640],
              [1.9538, 1.9597, 1.9640, 1.9697]])
y = np.array([[1.9707],
              [1.9653],
              [1.9538],
              [1.9538],
              [1.9538],
              [1.9597],
              [1.9640],
              [1.9697],
              [1.9542]])

np.random.seed(1)

# случайно инициализируем веса
syn0 = 2 * np.random.random((4, 50)) - 1  # Входной слой -> Первый скрытый слой
syn1 = 2 * np.random.random((50, 4)) - 1  # Первый скрытый слой -> Второй скрытый слой
syn2 = 2 * np.random.random((4, 1)) - 1  # Второй скрытый слой -> Выходной слой

for j in range(60000):
    # проходим вперёд по слоям
    l0 = X
    l1 = nonlin(np.dot(l0, syn0))
    l2 = nonlin(np.dot(l1, syn1))
    l3 = nonlin(np.dot(l2, syn2))

    # как сильно мы ошиблись относительно нужной величины?
    l3_error = y - l3
    
    if (j % 10000) == 0:
        print("Error:" + str(np.mean(np.abs(l3_error))))
        
    # в какую сторону нужно двигаться?
    l3_delta = l3_error * nonlin(l3, deriv=True)

    # как сильно значения l2 влияют на ошибки в l3?
    l2_error = l3_delta.dot(syn2.T)
    l2_delta = l2_error * nonlin(l2, deriv=True)

    # как сильно значения l1 влияют на ошибки в l2?
    l1_error = l2_delta.dot(syn1.T)
    l1_delta = l1_error * nonlin(l1, deriv=True)

    # обновление весов
    syn2 += l2.T.dot(l3_delta)
    syn1 += l1.T.dot(l2_delta)
    syn0 += l0.T.dot(l1_delta)

print(l3)

# прогноз

X1 = np.array([[1.9597, 1.9640, 1.9697, 1.9542],
              [1.9640, 1.9697, 1.9542, 1.9509]
              ])
y1 = np.array([[1.9509],
              [1.9509]])

# нормировка значений X1, Y1 для прогноза с теми же коэффициентами
X1 = (X1-np.min(X))/(np.max(X)-np.min(X))
y1 = (y1-np.min(y))/(np.max(y)-np.min(y))

l0 = X1
l1 = nonlin(np.dot(l0, syn0))
l2 = nonlin(np.dot(l1, syn1))

# как сильно мы ошиблись относительно нужной величины?
l2_error = y1 - l2

print('ошибка прогноза (до обратной нормировки) ', l2_error)

# обратная нормировка
y2 = l2 * (np.max(y) - np.min(y)) + np.min(y)

print('Прогноз:  ', y2)